function g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}
# Aliases
alias "ac"="source ./.venv/bin/activate"
alias "da"="deactivate"
alias "bashrc"="vim ~/.bashrc"
alias "mkdir"="mkdir -pv"
alias "chr"="google-chrome"
alias "br"="brave-browser"
alias "pgAdmin4"="workon pgadmin4 ; python3.7 ~/.virtualenvs/pgadmin4/lib/python3.7/site-packages/pgadmin4/pgAdmin4.py"
alias "south-pole"="ssh root@139.59.144.120"
alias "spectest-interp"="~/wabt/bin/spectest-interp"
alias "studio"="/usr/local/android-studio/bin/studio.sh"
alias "update-mouse"="sudo modprobe -r psmouse && sudo modprobe psmouse"
alias "wabt-unittests"="~/wabt/bin/wabt-unittests"
alias "wasm-interp"="~/wabt/bin/wasm-interp"
alias "wasm-objdump"="~/wabt/bin/wasm-objdump"
alias "wasm-opcodecnt"="~/wabt/bin/wasm-opcodecnt"
alias "wasm-validate"="~/wabt/bin/wasm-validate"
alias "wasm2c"="~/wabt/bin/wasm2c"
alias "wasm2wat"="~/wabt/bin/wasm2wat"
alias "wast2json"="~/wabt/bin/wast2json"
alias "wat-desugar"="~/wabt/bin/wat-desugar"
alias "wat2wasm"="~/wabt/bin/wat2wasm"
alias "trc"="vim ~/.tmux.conf"
alias "grc"="vim ~/.gitconfig"
alias "vrc"="vim ~/.vimrc"
alias "zrc"="vim ~/.zshrc"
alias "arc"="vim ~/.alacritty.yml"
alias "brc"="vim ~/.bashrc"
alias "zenv"="vim ~/.zshenv"
alias "irc"="vim ~/.install_dependencies"
alias "gl"="g l"
alias "gf"="g f"
alias "gp"="g p"
alias "q"="exit"
alias "kill_db"="sudo pkill mariadb; sudo pkill mysql; sudo pkill postgres"

rm_swapfile() {
  sudo swapoff -v "$1"
  sudo sed -i "\%$1%d" /etc/fstab 
  sudo rm "$1"
}

swapfile() {
  sudo fallocate -l 1G "$1"
  sudo chmod 600 "$1"
  sudo mkswap "$1"
  sudo swapon "$1"
  echo "$1" swap swap defaults 0 0 | sudo tee -a /etc/fstab
}

function dcd () {
  docker-compose down --remove-orphans 
}

function dcu() {
  dcd
  docker-compose up --remove-orphans --build $@
}

function dcdd() {
  docker-compose -f docker-compose-dev.y*ml down --remove-orphans 
}

function dcud() {
  dcdd
  docker-compose -f docker-compose-dev.y*ml up --build $@
}

function dcdc() {
  docker-compose -f docker-compose-check.y*ml down --remove-orphans
}

function dcuc() {
  dcdc
  docker-compose -f docker-compose-check.y*ml up --build $@
}

alias ta='tmux attach -t $(tmux list-sessions | sed -E "s/:.*$//" | grep -v \"^$(tmux display-message -p "#S")\$\" | fzf --reverse | xargs echo)'
alias tk='tmux kill-session -t $(tmux list-sessions | sed -E "s/:.*$//" | grep -v \"^$(tmux display-message -p "#S")\$\" | fzf --reverse | xargs echo)'
alias tka='tmux kill-server'
alias tks='tmux kill-session'
alias ssh="ssh -R 127.0.0.1:2222:127.0.0.1:22"

function countdown(){
   date1=$((`date +%s` + $1)); 
   while [ "$date1" -ge `date +%s` ]; do 
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
}

function source_env() {
  export $(grep -v '^#' "$1" | xargs -d '\n')
}

function with_env() {
  env $(grep -v '^#' .env | xargs -d '\n') "$@"
}

function stopwatch(){
  date1=`date +%s`; 
   while true; do 
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
    sleep 0.1
   done
}

function scpb(){
    scp -r -P2222 "$1" rasmus@127.0.0.1:"$2"
}

function translate() {
  directory=$(pwd)
  cd ~/.fun_scraping
  pipenv run python wikipedia-translator.py "$1" "$2"
  cd "$directory"
}
function anki() {
  directory=$(pwd)
  file="$directory"/"$1"
  echo File: "$file"
  cd ~/.pyautogui
  pipenv run python anki.py "$file" "$2"
  cd "$directory"
}

function tmux-start() {
  directory=$(pwd)
  cd ~/.pyautogui
  pipenv run python tmux.py "$1"
  cd "$directory"
}
alias "ts"="tmux-start"
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

function removecontainers() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

function armageddon() {
    removecontainers
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
}

function default_tmux_session() {
    local SESSION_NAME=$(basename "${$(pwd)//[.:]/_}")
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

function source_tmux_script() {
  tmux_script_path="$1"

  if [ ! -x "$tmux_script_path" ]; then
    default_tmux_session
    return
  fi

  local DIGEST="$(openssl sha256 "$tmux_script_path")"
  if grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
    INITIATED_EXTERNALLY=$INITIATED_EXTERNALLY source $tmux_script_path
    return
  fi

  cat "$tmux_script_path"
  echo 'Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
  read REPLY > /dev/null
  if [[ $REPLY =~ ^[Tt]$ ]]; then
    echo "$DIGEST" >> ~/..tmux.digests
    return
  fi

  default_tmux_session
}

function tmux() {
  if command -v emulate &> /dev/null;
  then
    emulate -L zsh
  fi

  # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
  # (Inspired by: https://gist.github.com/lann/6771001)
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
  else
    INITIATED_EXTERNALLY=false source_tmux_script "$(pwd)/.tmux"
  fi
}

function t() {
  tmux "$@"
}

function b {
    f=$(mktemp)
    (
  set +e
  broot --outcmd "$f" "$@"
  code=$?
  if [ "$code" != 0 ]; then
      rm -f "$f"
      exit "$code"
  fi
    )
    code=$?
    if [ "$code" != 0 ]; then
  return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}

function notes() {
  for note in $@
  do
    mv "$note" ~/projects/notes
  done
}

if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate" ]]; then
  source "${VIRTUAL_ENV}/bin/activate"
fi
