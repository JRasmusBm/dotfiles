function g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}
# Aliases
alias "ac"="source ./venv/bin/activate"
alias "da"="deactivate"
alias "bashrc"="vim ~/.bashrc"
alias "mkdir"="mkdir -pv"
alias "chr"="google-chrome"
alias "br"="brave-browser"
alias "co"="git add --all && git commit"
alias "pgAdmin4"="workon pgadmin4 ; python3.7 ~/.virtualenvs/pgadmin4/lib/python3.7/site-packages/pgadmin4/pgAdmin4.py"
alias "st"="g st"
alias "south-pole"="ssh root@139.59.144.120"
alias "spectest-interp"="~/wabt/bin/spectest-interp"
alias "studio"="/usr/local/android-studio/bin/studio.sh"
alias "update-mouse"="sudo modprobe -r psmouse && sudo modprobe psmouse"
alias "wabt-unittests"="~/wabt/bin/wabt-unittests"
alias "wasm-interp"="~/wabt/bin/wasm-interp"
alias "wasm-objdump"="~/wabt/bin/wasm-objdump"
alias "wasm-opcodecnt"="~/wabt/bin/wasm-opcodecnt"
alias "wasm-validate"="~/wabt/bin/wasm-validate"
alias "wasm2c"="~/wabt/bin/wasm2c"
alias "wasm2wat"="~/wabt/bin/wasm2wat"
alias "wast2json"="~/wabt/bin/wast2json"
alias "wat-desugar"="~/wabt/bin/wat-desugar"
alias "wat2wasm"="~/wabt/bin/wat2wasm"
alias "trc"="vim ~/.tmux.conf"
alias "grc"="vim ~/.gitconfig"
alias "vrc"="vim ~/.vimrc"
alias "zrc"="vim ~/.zshrc"
alias "arc"="vim ~/.alacritty.yml"
alias "brc"="vim ~/.bashrc"
alias "zenv"="vim ~/.zshenv"
alias "irc"="vim ~/.install_dependencies"
alias "gl"="g l"
alias "kill_db"="sudo pkill mariadb; sudo pkill mysql; sudo pkill postgres"

rm_swapfile() {
  sudo swapoff -v "$1"
  sudo sed -i "\%$1%d" /etc/fstab 
  sudo rm "$1"
}

swapfile() {
  sudo fallocate -l 1G "$1"
  sudo chmod 600 "$1"
  sudo mkswap "$1"
  sudo swapon "$1"
  echo "$1" swap swap defaults 0 0 | sudo tee -a /etc/fstab
}

function dcd () {
  docker-compose down --remove-orphans 
}

function dcu() {
  dcd
  docker-compose up --remove-orphans --build $@
}

function dcdd() {
  docker-compose -f docker-compose-dev.yml down --remove-orphans 
}

function dcud() {
  dcdd
  docker-compose -f docker-compose-dev.yml up --build $@
}

function dcdc() {
  docker-compose -f docker-compose-check.yml down --remove-orphans
}

function dcuc() {
  dcdc
  docker-compose -f docker-compose-check.yml up --build $@
}

alias ta='tmux attach -t $(tmux list-sessions | sed -E "s/:.*$//" | grep -v \"^$(tmux display-message -p "#S")\$\" | fzf --reverse | xargs echo)'
alias tk='tmux kill-session -t $(tmux list-sessions | sed -E "s/:.*$//" | grep -v \"^$(tmux display-message -p "#S")\$\" | fzf --reverse | xargs echo)'
alias tka='tmux kill-server'
alias tks='tmux kill-session'
alias ssh="ssh -R 127.0.0.1:2222:127.0.0.1:22"

function countdown(){
   date1=$((`date +%s` + $1)); 
   while [ "$date1" -ge `date +%s` ]; do 
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
}
function stopwatch(){
  date1=`date +%s`; 
   while true; do 
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
    sleep 0.1
   done
}

function scpb(){
    scp -r -P2222 "$1" rasmus@127.0.0.1:"$2"
}

function translate() {
  directory=$(pwd)
  cd ~/.fun_scraping
  pipenv run python wikipedia-translator.py "$1" "$2"
  cd "$directory"
}
function anki() {
  directory=$(pwd)
  file="$directory"/"$1"
  echo File: "$file"
  cd ~/.pyautogui
  pipenv run python anki.py "$file" "$2"
  cd "$directory"
}

function tmux-start() {
  directory=$(pwd)
  cd ~/.pyautogui
  pipenv run python tmux.py "$1"
  cd "$directory"
}
alias "ts"="tmux-start"
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

function removecontainers() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

function armageddon() {
    removecontainers
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
}

function tmux() {
  emulate -L zsh

  # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
  # (Inspired by: https://gist.github.com/lann/6771001)
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
    return
  fi

  # Check for .tmux file (poor man's Tmuxinator).
  if [ -x .tmux ]; then
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha256 .tmux)"
    if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
      cat .tmux
      read -k 1 -r \
        'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
      echo
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/..tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # Attach to existing session, or create one, based on current directory.
  local SESSION_NAME=$(basename "${$(pwd)//[.:]/_}")
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

# Bounce the Dock icon, if iTerm does not have focus.
function bounce() {
  if [ -n "$TMUX" ]; then
    print -Pn "\ePtmux;\e\e]1337;RequestAttention=1\a\e\\"
  else
    print -Pn "\e]1337;RequestAttention=1\a"
  fi
}

alias "t"="tmux"

luma() {
  emulate -L zsh

  local COLOR_HEX=$1

  if [ -z "$COLOR_HEX" ]; then
    echo "Missing argument hex color (RRGGBB)"
    return 1
  fi

  # Extract hex channels from background color (RRGGBB).
  local COLOR_HEX_RED=$(echo "$COLOR_HEX" | cut -c 1-2)
  local COLOR_HEX_GREEN=$(echo "$COLOR_HEX" | cut -c 3-4)
  local COLOR_HEX_BLUE=$(echo "$COLOR_HEX" | cut -c 5-6)

  # Convert hex colors to decimal.
  local COLOR_DEC_RED=$((16#$COLOR_HEX_RED))
  local COLOR_DEC_GREEN=$((16#$COLOR_HEX_GREEN))
  local COLOR_DEC_BLUE=$((16#$COLOR_HEX_BLUE))

  # Calculate perceived brightness of background per ITU-R BT.709
  # https://en.wikipedia.org/wiki/Rec._709#Luma_coefficients
  # http://stackoverflow.com/a/12043228/18986
  local COLOR_LUMA_RED=$((0.2126 * $COLOR_DEC_RED))
  local COLOR_LUMA_GREEN=$((0.7152 * $COLOR_DEC_GREEN))
  local COLOR_LUMA_BLUE=$((0.0722 * $COLOR_DEC_BLUE))

  local COLOR_LUMA=$(($COLOR_LUMA_RED + $COLOR_LUMA_GREEN + $COLOR_LUMA_BLUE))

  echo "$COLOR_LUMA"
}

function b {
    f=$(mktemp)
    (
  set +e
  broot --outcmd "$f" "$@"
  code=$?
  if [ "$code" != 0 ]; then
      rm -f "$f"
      exit "$code"
  fi
    )
    code=$?
    if [ "$code" != 0 ]; then
  return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}

export BASE16_DIR=~/.config/base16-shell/scripts
export BASE16_CONFIG="$HOME/.current-theme"
color() {
  emulate -L zsh

  local SCHEME="$1"
  local BASE16_CONFIG_PREVIOUS="$BASE16_CONFIG.previous"
  local STATUS=0

  __color() {
    SCHEME=$1
    local FILE="$BASE16_DIR/base16-$SCHEME.sh"
    if [[ -e "$FILE" ]]; then
      local BG=$(grep color_background= "$FILE" | cut -d \" -f2 | sed -e 's#/##g')
      local LUMA=$(luma "$BG")
      local LIGHT=$((LUMA > 127.5))
      local BACKGROUND=dark
      if [ "$LIGHT" -eq 1 ]; then
        BACKGROUND=light
      fi

      if [ -e "$BASE16_CONFIG" ]; then
        cp "$BASE16_CONFIG" "$BASE16_CONFIG_PREVIOUS"
      fi

      echo "$SCHEME" >! "$BASE16_CONFIG"
      echo "$BACKGROUND" >> "$BASE16_CONFIG"
      sh "$FILE"

      if [ -n "$TMUX" ]; then
        local CC=$(grep color18= "$FILE" | cut -d \" -f2 | sed -e 's#/##g')
        if [ -n "$BG" -a -n "$CC" ]; then
          command tmux set -a window-active-style "bg=#$BG"
          command tmux set -a window-style "bg=#$CC"
          command tmux set -g pane-active-border-bg "#$CC"
          command tmux set -g pane-border-bg "#$CC"
        fi
      fi
    else
      echo "Scheme '$SCHEME' not found in $BASE16_DIR"
      STATUS=1
    fi
  }

  if [ $# -eq 0 ]; then
    if [ -s "$BASE16_CONFIG" ]; then
      cat "$BASE16_CONFIG"
      local SCHEME=$(head -1 "$BASE16_CONFIG")
      __color "$SCHEME"
      return
    else
      SCHEME=help
    fi
  fi

  case "$SCHEME" in
  help)
    echo 'color [tomorrow-night|ocean|grayscale-light|...]'
    echo
    echo 'Available schemes:'
    color ls
    return
    ;;
  ls)
    find "$BASE16_DIR" -name 'base16-*.sh' | \
      sed -E 's|.+/base16-||' | \
      sed -E 's/\.sh//' | \
      column
      ;;
  -)
    if [[ -s "$BASE16_CONFIG_PREVIOUS" ]]; then
      local PREVIOUS_SCHEME=$(head -1 "$BASE16_CONFIG_PREVIOUS")
      __color "$PREVIOUS_SCHEME"
    else
      echo "warning: no previous config found at $BASE16_CONFIG_PREVIOUS"
      STATUS=1
    fi
    ;;
  *)
    __color "$SCHEME"
    ;;
  esac

  unfunction __color
  return $STATUS
}

alias sc='color $(ls "$BASE16_DIR" | sed s/base16-//g | sed s/.sh//g | fzf --reverse)'

if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate" ]]; then
  source "${VIRTUAL_ENV}/bin/activate"
fi
